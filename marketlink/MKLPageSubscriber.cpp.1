
/************************************************************************
||
|| DATE:                $Date:$
|| SOURCE:              $Source:$
|| STATE:               $State:$
|| ID:                  $Id:$
|| REVISION:            $Revision:$
|| LOG:                 $Log:$
|| LOG:
************************************************************************/

#include "MKLFeedApp.hpp"
#include "Logger.hpp"
#include "MKLPageSubscriber.hpp"
#include "MKLFeedSession.hpp"
#include "Scheduler.hpp"
#include "DataGraph.hpp"
#include "MKLThrottleHandler.hpp"

MKLPageSubscriber::MKLPageSubscriber(FeedSession* s, const URLNameSpace& ns): _mySession(s), _activated(false), _myPage(NULL), _locked(false)
{
	_updates = new vector<DataGraph::DataMap>();
	_security_id = ns.security_id;
	_address = ns.source + "." + ns.page;
	_row_tmpl_str = ns.row_tmpl;
	if (setRowTmpl() == false)
		setDefaultRowMap();
	setMySlot(ns.slot, _security_id);
}

MKLPageSubscriber::~MKLPageSubscriber()
{
	map<DataPage::PageSlot *, string>::iterator it = _mySlotMap.begin();
	for (it; it != _mySlotMap.end(); it++){
		delete (*it).first;
	}
	_updates->clear();
	delete _updates;

}

void
MKLPageSubscriber::notify( Datum *datum)
{

}

void 
MKLPageSubscriber::onTimer(TimerId id)
{
	_locked = false;

}

void
MKLPageSubscriber::onData(DataPage *page, DataPage::PageSlot slot)
{
	if (_mySession == NULL) return;
	Logger::getLogger()->log(Logger::TYPE_INFO,"MKLPageSubscriber::onData processing %s ", _address.c_str());
	string tmstmp = Scheduler::getCurrentTime(CANPX_TIME_FORMAT); 
	theMKLFeedApp->setTimestamp(_address, tmstmp);

	if (_activated == false){
		_myPage = page;
		MKLThrottleHandler::addRic(_security_id, this);
		publishPageImage(page, slot);
		_activated = true;

	}else{
		DataPage::Update upd = page->getLastUpdate();
		publishPageUpdate(upd);	
	}
}

void
MKLPageSubscriber::publishRefresh()
{

	_updates->clear();
	buildPageImage();
	MKLFeedSession *feed = dynamic_cast<MKLFeedSession *>(_mySession);
	if (feed && !_locked){
		vector<DataGraph::DataMap>::iterator it = _updates->begin();
		while (it != _updates->end()){
			feed->publishInsertRequest((*it), _security_id);
			it = _updates->erase(it);
		}
	}

}

void
MKLPageSubscriber::publishPageImage(DataPage *page, DataPage::PageSlot& slot)
{
	//convert from DataPage to DataGraph::DataMap
	//_mySession->publishInsertRequest(const DataGraph::DataMap& rec, _security_id)
	if (page == _myPage){
		publishRefresh();
	}
}

void 
MKLPageSubscriber::publishPageUpdate(DataPage::Update& up)
{
	buildPageUpdate(up);
	MKLFeedSession *feed = dynamic_cast<MKLFeedSession *>(_mySession);
	if (feed && !_locked){
		vector<DataGraph::DataMap>::iterator it = _updates->begin();
		while (it != _updates->end()){
			feed->publishInsertRequest((*it), _security_id);
			it = _updates->erase(it);
		}
	}

}

void
MKLPageSubscriber::addRefresh()
{

	Logger::getLogger()->log(Logger::TYPE_INFO, "MKLPageSubscriber::addRefresh %s , updates %i",_security_id.c_str(), _updates->size());
	
}

void
MKLPageSubscriber::addWaitTime(int sec)
{
	if (!_locked){
		_locked = true;
		addTimer(sec * 1000, 1, this);
		Logger::getLogger()->log(Logger::TYPE_INFO, "MKLPageSubscriber::addWaitTime %s, %i sec, updates %i",_security_id.c_str(), sec, _updates->size());
	} else {
		Logger::getLogger()->log(Logger::TYPE_ERROR, "MKLPageSubscriber::addWaitTime %s, already locked, updates %i",_security_id.c_str(), _updates->size());
	}

}
vector<DataPage::PageSlot>
MKLPageSubscriber::getMySlot()const
{
        return _my_slot;

}

void
MKLPageSubscriber::buildPageImage()
{
	if (_myPage){
		_pageImage.clear();
		for (int i = DataPage::MIN_ROW; i <= DataPage::MAX_ROW; i++){
			map<int, string>::iterator its = _rowMap.find(i);
			if ( its != _rowMap.end()){
				string rowID = (*its).second;
				string rowVal = _myPage->rowAsString(i);
				DataGraph::Variant v(DataGraph::SVAL, rowVal.c_str()); 
				_pageImage.insert(map<string, DataGraph::Variant>::value_type(rowID, v));
				_updates->push_back(_pageImage);
				_pageImage.clear();
			}
		}
		//_updates->push_back(_pageImage);
	}


}

void
MKLPageSubscriber::buildPageUpdate(DataPage::Update &up)
{
	if (_myPage){
		_pageUpdate.clear();
		map<int, string>::iterator its = _rowMap.find(up.row);
		if ( its != _rowMap.end()){
			string rowID = (*its).second;
			string rowVal; 
			if ( up.column == 0 ){
				rowVal = up.data;
				//line refresh
			} else {
				//partial refresh
				// <CSI>15`ABCDEFGHIJ --> offset to 15 col
				// col's are 0 based
				char col_ch[5];	
				sprintf(col_ch, "%i`", up.column );
				string csi = string(1, (char)0x1B) + string(1, (char)0x5B);
				rowVal = csi + col_ch + up.data;
			}
			DataGraph::Variant v(DataGraph::SVAL, rowVal.c_str()); 
			_pageUpdate.insert(map<string, DataGraph::Variant>::value_type(rowID, v));
			_updates->push_back(_pageUpdate);
			suppressUpdates(rowID, up); 
		}

	}
}
void
MKLPageSubscriber::suppressUpdates(const string& rowID, DataPage::Update &up)
{
	int counter = 0;
	for (int i = 0; i < _updates->size(); i++){
		DataGraph::DataMap d = _updates->at(i);
		DataGraph::DataMap::iterator it = d.find(rowID);
		if (it != d.end())
			counter++;
	}
	if (counter >= 10){ //watermark-descard all updates and refresh the row
		Logger::getLogger()->log(Logger::TYPE_INFO, "MKLPageSubscriber::suppressUpdates %s, updates %i of %i row, total %i",_security_id.c_str(), counter, up.row, _updates->size());
		vector<DataGraph::DataMap>::iterator it = _updates->begin();
		while (it != _updates->end()){
			DataGraph::DataMap d = (*it);	
			DataGraph::DataMap::iterator itr = d.find(rowID);
			if (itr != d.end() && d.size() == 1){ //exclude Image
				it = _updates->erase(it);
			} else {
				it++;
			}
		}
		_pageUpdate.clear();
		string rowVal = _myPage->rowAsString(up.row);
		DataGraph::Variant v(DataGraph::SVAL, rowVal.c_str()); 
		_pageImage.insert(map<string, DataGraph::Variant>::value_type(rowID, v));
		_updates->push_back(_pageUpdate);
		Logger::getLogger()->log(Logger::TYPE_INFO, "MKLPageSubscriber::suppressUpdates %s, refresh row %i, total %i",_security_id.c_str(), up.row,  _updates->size());
	}
}

void
MKLPageSubscriber::setMySlot(const string& slot, const string& id)
{
	// slot "r1:0 & r2:14 & c1:0 & c2:40"

	vector<string> chanks;
	DataPage::PageSlot *myslot = new DataPage::PageSlot();
	Formatter::split(slot, "&", chanks);
	if (chanks.size() < 4){
		Logger::getLogger()->log(Logger::TYPE_ERROR, "MKLPageSubscriber::setMySlot slot is not sufficient: %i chanks. The default Slot is used", chanks.size());
		myslot->row1 = DataPage::MIN_ROW;
		myslot->row2 = DataPage::MAX_ROW;
		myslot->column1 = DataPage::MIN_COLUMN;
		myslot->column2 = DataPage::MAX_COLUMN;
	} else {
		for ( int i = 0; i < chanks.size(); i++){
			string ch1 = Formatter::trim(chanks[i]);
			vector<string>  v2;
			Formatter::split(ch1, ":", v2);
			if (v2.size() == 2){
				if (v2[0] == "r1")
					myslot->row1 = (int)Formatter::ATOF(v2[1].c_str());
					else if (v2[0] == "r2")
						myslot->row2 = (int)Formatter::ATOF(v2[1].c_str());
					else if (v2[0] == "c1")
						myslot->column1 = (int)Formatter::ATOF(v2[1].c_str());
					else if (v2[0] == "c2")
						myslot->column2 = (int)Formatter::ATOF(v2[1].c_str());
					else
						Logger::getLogger()->log(Logger::TYPE_ERROR, "MKLPageSubscriber::setMySlot() unrecognized %s. [r1|r2|c1|c2]", v2[0].c_str());
			}
		}
	}
        _my_slot.push_back(*myslot);
	_mySlotMap[myslot] = id;

}

bool
MKLPageSubscriber::setRowTmpl()
{
	bool ret = false;
	char buf[80];
	for (int j = 1; j <= 25; j++){
		sprintf(buf, "%s.ROW80_%i", _row_tmpl_str.c_str(), j);	
		string row = ConfigMap::getConfig()->getValue(buf);
		if (row.size()){
			_row_tmpl.push_back(row); 
			if (!ret) ret = true;
		}

	}

	for (int i = 0; i < _row_tmpl.size(); i++){
		_rowMap.insert(map<int, string>::value_type(i, _row_tmpl[i]));
	}
	return ret;
}

void
MKLPageSubscriber::setDefaultRowMap()
{
	// ONLY 25 LINES
	//_rowMap.insert(map<int, string>::value_type(0, _row_tmpl[0]));
	_rowMap.insert(map<int, string>::value_type(0, ROW80_2));
	_rowMap.insert(map<int, string>::value_type(1, ROW80_3));
	_rowMap.insert(map<int, string>::value_type(2, ROW80_4));
	_rowMap.insert(map<int, string>::value_type(3, ROW80_5));
	_rowMap.insert(map<int, string>::value_type(4, ROW80_6));
	_rowMap.insert(map<int, string>::value_type(5, ROW80_7));
	_rowMap.insert(map<int, string>::value_type(6, ROW80_8));
	_rowMap.insert(map<int, string>::value_type(7, ROW80_9));
	_rowMap.insert(map<int, string>::value_type(8, ROW80_10));
	_rowMap.insert(map<int, string>::value_type(9, ROW80_11));
	_rowMap.insert(map<int, string>::value_type(10, ROW80_12));
	_rowMap.insert(map<int, string>::value_type(11, ROW80_13));
	_rowMap.insert(map<int, string>::value_type(12, ROW80_14));
	_rowMap.insert(map<int, string>::value_type(13, ROW80_15));
	_rowMap.insert(map<int, string>::value_type(14, ROW80_16));
	_rowMap.insert(map<int, string>::value_type(15, ROW80_17));
	_rowMap.insert(map<int, string>::value_type(16, ROW80_18));
	_rowMap.insert(map<int, string>::value_type(17, ROW80_19));
	_rowMap.insert(map<int, string>::value_type(18, ROW80_20));
	_rowMap.insert(map<int, string>::value_type(19, ROW80_21));
	_rowMap.insert(map<int, string>::value_type(20, ROW80_22));
	_rowMap.insert(map<int, string>::value_type(21, ROW80_23));
	_rowMap.insert(map<int, string>::value_type(22, ROW80_24));
	_rowMap.insert(map<int, string>::value_type(23, ROW80_25));
	//_rowMap.insert(map<int, string>::value_type(24, ROW80_25));

}
