head	1.1;
access;
symbols;
locks; strict;
comment	@// @;


1.1
date	2006.04.07.19.31.50;	author mikhailt;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@
/************************************************************************
||
|| DATE:                $Date$
|| SOURCE:              $Source$
|| STATE:               $State$
|| ID:                  $Id$
|| REVISION:    $Revision$
|| LOG:                 $Log$
************************************************************************/
#ifndef GRECORDPRODUCER_HPP
#define GRECORDPRODUCER_HPP

#include <string>
#include "ConfigMap.hpp"
#include "IOCallback.hpp"
#include "TimerCallback.hpp"
#include "MsgProcessor.hpp"
#include "MsgGraph.hpp"
#include "DataGraph.hpp"
#include "Subscriber.hpp"

#define SA struct sockaddr

class GRecordProducer: public Subscriber,
			public TimerCallback
{
	public:
		GRecordProducer(const ConfigMap &);
		virtual ~GRecordProducer();
		virtual void notify(Datum *datum);
		virtual int init();

	protected:
		class GPublisher: public IOCallback
		{
			public:	
				GPublisher(GRecordProducer *producer, int fd);
				virtual ~GPublisher();
				virtual void publish(const string& str);
			protected:
				virtual void onRead(int fd, InputId id){};
				virtual void onWrite(int fd, InputId id);
				virtual void onExcept(int fd, InputId id){};
				InputId _out;
				string _publishStr;
				GRecordProducer *_producer;
				int _fd;
		} *_publisher; 

		virtual void onRead(int fd, InputId id){};
		virtual void onWrite(int fd, InputId id){};
		virtual void onExcept(int fd, InputId id){};
		virtual void onTimer(TimerId id);
		virtual void publish(const string& str);
		int _fd;
		int _port;
		string _ip;

};


#endif //GRECORDPRODUCER_HPP
@
