[LOGGER]
#LOGGER=SYSLOG

PERSISTENT_CACHE=TRUE

[OPEN SERVER]
OPENSERVER_PORT=5510
NUMBER_CONNECTIONS=50
NAME_SPACE=/parser

[CONTROL_MULTICASTING]
#CONTROL_SESSION=TRUE
#CONTROL_MULTICAST_GROUP_IP=230.0.0.2
#CONTROL_MULTICAST_GROUP_PORT=4446

[HEARTBEAT_MULTICASTING]
HEARTBEAT_SESSION=TRUE
HEARTBEAT_MULTICAST_GROUP_IP=230.0.0.1
HEARTBEAT_MULTICAST_GROUP_PORT=4446
HEARTBEAT_INTERVAL=10

[PAGEPARSER]
PAGEPARSER_NAME=Shorcan

#######################################################################
# RFA_CONFIGURATION
#
# Reuters Foundation API (RFA) is the toolkit driving the Reuters
# Market Data System (RMDS) realtime distribution.
#
# RFA details are driven from its own configuration file describing
# communication sessions, publishers and subscribers of market data.
# The following configuration stanza references the configuration file
# and the specific sessions required for the Canpx system.
#######################################################################
[RFA_CONFIGURATION]
RFA_CONFIG_FILE=RFAshorcan.cfg
RFA_UNMANAGED_SESSION=CanpxUnmanaged
RFA_MANAGED_SESSION=CanpxManaged
RFA_MANAGED_SERVICE=P_SHORCAN

#######################################################################
# TIBRV_SESSION
#
# Component communication utilizes Tibco's Rendezvous (tibrv) as its 
# communication mechanism.  See the SUBJECT_MANAGER within this file.
#
# The following 3 parameters are the basic components required to 
# configure tibrv communication.
#######################################################################
[TIBRV_SESSION]
TIBRV_SERVICE=
TIBRV_NETWORK=
TIBRV_DAEMON=

#######################################################################
# SUBJECT_MANAGER
#
# Manage the list of subjects an application will produce/publish
# as well as consume/subscribe to/from RMDS.  The list is used by 
# cooperating applications to determine the RMDS service/items to manage.
#
# The interface manages 2 discrete lists.  Each list contains a group
# of subjects that the application will consume (subscribe to) as well
# as produce (publish to).  Each interface utilizes Tibco's Rendezvous
# (tibrv) for all communication.
#
# PUBLISH list
# ------------
#
# The publish list manages groups of subjects based on type. A type is 
# defined by a name and an associated algorithm which determines how a 
# data image/update will be slotted into the interface.
#
# The following details outline the interface:
#
# SUBJECT_PUBLISH.<group #>.NAME
#
# The name of the group/type used to hold the subjects.  This name
# specification is used for client requests to retrieve a list of subjects 
# for a specific type.
#
# SUBJECT_PUBLISH.<group #>.SUBJECT
#
# The subject used when a new entry has been added to this group.  Upon 
# addition, the manager will publish a notification containing the new
# subject added to this group.  Interested clients will process the 
# real-time notification appropriately.
#
# Default: no realtime notification will be published.
#
# SUBJECT_PUBLISH.<group #>.CONDITION
#
# The algorithm used to determine where a data record should be slotted.
# Upon update within the manager, the address (subject) of the data is
# first checked within the interface.  If not found, each group type is
# visited to determine, based on the condition, where this data's addresss
# (subject) should be slotted, if any.
#
# Default:  All updates will be slotted in this group.
#
# SUBSCRIBE list
# --------------
#
# The subscribe interface manages groups of subjects based on type.
# A type is defined by a name which is used to make a request for the
# list of subjects associated with this type.  See definition for 
# SUBJECT_REQUEST_LIST.  In addition, this interface will support realtime
# updates of newly created subjects by it's cooperating components.
#
# The following details outline the interface:
#
# SUBJECT_SUBSCRIBE.<group #>.NAME
#
# The name of the group/type used to define the subjects.  This name
# specification is used for requests to retrieve a list of subjects for
# a specific type.
#
# SUBJECT_SUBSCRIBE.<group #>.SUBJECT
#
# The subject used when a new entry has been added to this group.  Upon 
# addition, the manager will receive a notification containing the new
# subject added to this group.  Upon addition, the application will subscribe
# to the new RMDS record.
#
# LIST interface
# --------------
#
# The LIST interface supports the ability to request and respond to list
# requests.
#
# SUBJECT_RESPOND_LIST
# 
# Supporting a request/reply paradigm, when received the interface will determine
# the list type and return the list to the requestor.
#
# SUBJECT_REQUEST_LIST
#
# Supporting a request/reply paradigm, this request specifies the type of
# subject list to request.  Multiple recipients may respond to this request.
#
# SUBJECT_REQUEST_LIST_TIMER
#
# The number of seconds a user-defined timer will be launched after all
# list requests have been invoked.  This parameter is used to provide a 
# desired or safe amount of time needed to receieve all responses.
#
# Default:  No timer will be launched.
###########################################################################
[SUBJECT_MANAGER]
SUBJECT_RESPOND_LIST=CANPX.LIST.PARSERS
SUBJECT_CONTRIBUTOR_NAME=Shorcan

SUBJECT_PUBLISH.1.NAME=tbill
SUBJECT_PUBLISH.1.SUBJECT=CANPX.ITEM.NEW.TBILL
SUBJECT_PUBLISH.1.CONDITION=INSTR_SUBTYPE=BILL&INSTR_SUBTYPE_1=STATE&ML_MAPPED!=15394

SUBJECT_PUBLISH.2.NAME=bond
SUBJECT_PUBLISH.2.SUBJECT=CANPX.ITEM.NEW.BOND
SUBJECT_PUBLISH.2.CONDITION=INSTR_SUBTYPE=BOND&INSTR_SUBTYPE_1=STATE&ML_MAPPED!=15394&ML_MAPPED!=17658

SUBJECT_PUBLISH.3.NAME=prov
SUBJECT_PUBLISH.3.SUBJECT=CANPX.ITEM.NEW.PROV
SUBJECT_PUBLISH.3.CONDITION=INSTR_SUBTYPE=BOND&INSTR_SUBTYPE_1=PROVINCIAL


[URL]
URL.SHORCAN_1.NAME=/shorcan/1
URL.SHORCAN_1.SOURCE=SHORCAN
URL.SHORCAN_1.SUBSCRIBER=SHORCAN
URL.SHORCAN_1.PAGE=1
URL.SHORCAN_1.PARSER=./python/MLObject/Parser.py
URL.SHORCAN_1.PARSER_MAP=./python/shorcan_map/1.py

URL.SHORCAN_2.NAME=/shorcan/2
URL.SHORCAN_2.SOURCE=SHORCAN
URL.SHORCAN_2.SUBSCRIBER=SHORCAN
URL.SHORCAN_2.PAGE=2
URL.SHORCAN_2.PARSER=./python/MLObject/Parser.py
URL.SHORCAN_2.PARSER_MAP=./python/shorcan_map/2.py

URL.SHORCAN_3.NAME=/shorcan/3
URL.SHORCAN_3.SOURCE=SHORCAN
URL.SHORCAN_3.SUBSCRIBER=SHORCAN
URL.SHORCAN_3.PAGE=3
URL.SHORCAN_3.PARSER=./python/MLObject/Parser.py
URL.SHORCAN_3.PARSER_MAP=./python/shorcan_map/3.py

URL.SHORCAN_4.NAME=/shorcan/4
URL.SHORCAN_4.SOURCE=SHORCAN
URL.SHORCAN_4.SUBSCRIBER=SHORCAN
URL.SHORCAN_4.PAGE=4
URL.SHORCAN_4.PARSER=./python/MLObject/Parser.py
URL.SHORCAN_4.PARSER_MAP=./python/shorcan_map/4.py

URL.SHORCAN_5.NAME=/shorcan/5
URL.SHORCAN_5.SOURCE=SHORCAN
URL.SHORCAN_5.SUBSCRIBER=SHORCAN
URL.SHORCAN_5.PAGE=5
URL.SHORCAN_5.PARSER=./python/MLObject/Parser.py
URL.SHORCAN_5.PARSER_MAP=./python/shorcan_map/5.py

URL.SHORCAN_6.NAME=/shorcan/14
URL.SHORCAN_6.SOURCE=SHORCAN
URL.SHORCAN_6.SUBSCRIBER=SHORCAN
URL.SHORCAN_6.PAGE=14
URL.SHORCAN_6.PARSER=./python/MLObject/Parser.py
URL.SHORCAN_6.PARSER_MAP=./python/shorcan_map/14.py
